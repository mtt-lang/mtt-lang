kind term type.

type app term -> term -> term.
type fun (term -> term) -> term.

kind ty   type.
type arr  ty -> ty -> ty.
type let term -> (term -> term) -> term.

type pair term -> term -> term.
type pairT ty -> ty -> ty.

type unit term.
type unitT ty.

pred of i:term, o:ty.

of (app Hd Arg) B :-
    of Hd (arr A B), of Arg A.

of (fun F) (arr A B) :-
    pi x\ of x A => of (F x) B.

of unit unitT.

of (let A B) T :-
    of (app (fun B) A) T.

of (pair A B) (pairT At Bt) :-
    of A At, of B Bt.

of (fst X) A :- of X (prod A B).
    
of (snd X) B :- of X (prod A B).